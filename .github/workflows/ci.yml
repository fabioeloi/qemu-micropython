name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git log
        symlinks: true  # Handle symlinks properly

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__,build,dist
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.git,__pycache__,build,dist

    - name: Run tests
      run: |
        # Run Python tests
        python -m pytest tests/ -v

  build:
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git log
        symlinks: true  # Handle symlinks properly

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi
        sudo apt-get install -y qemu-system-arm

    - name: Build firmware
      run: |
        ./scripts/build.sh

    - name: Run QEMU tests
      run: |
        # Run GDB integration tests
        python3 tests/test_gdb_integration.py

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: firmware
        path: |
          firmware/build/firmware.elf
          firmware/build/firmware.bin
          firmware/build/firmware.hex
          test_results/
        if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'Release v')

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git log
        symlinks: true  # Handle symlinks properly

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: firmware

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract version from commit message
        VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'Release v\K[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
        SEMANTIC_VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP '\(v\K[0-9]+\.[0-9]+\.[0-9]+-[a-z]+\.[0-9]+\)')
        
        # Create release
        gh release create "v$VERSION" \
          --title "Release v$VERSION (v$SEMANTIC_VERSION)" \
          --notes-file latest_release_notes.md \
          firmware/build/firmware.elf \
          firmware/build/firmware.bin \
          firmware/build/firmware.hex \
          --draft=false \
          --prerelease=true