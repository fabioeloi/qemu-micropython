name: Sync Project Tracking

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'scripts/**'
      - 'tests/**'
      - 'ROADMAP_STATUS.md'
      - 'VERSION_MAPPING.md'
      - 'README.md'

jobs:
  sync-tracking:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git log

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub gitpython

    - name: Analyze changes and update tracking
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cat > sync_tracking.py << 'EOL'
        import os
        import re
        from github import Github
        from git import Repo
        import json

        # Initialize GitHub client
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])

        # Get the latest commit
        git_repo = Repo('.')
        latest_commit = git_repo.head.commit

        def extract_progress(content, section):
            """Extract progress percentage from markdown content"""
            pattern = rf"{section}.*?(\d+)%"
            match = re.search(pattern, content, re.DOTALL)
            return int(match.group(1)) if match else None

        def update_issue_progress(issue_number, progress):
            """Update issue with progress information"""
            issue = repo.get_issue(issue_number)
            body = issue.body or ""
            
            # Check if progress has changed
            current_progress = extract_progress(body, "Current Status")
            if current_progress != progress:
                comment = f"Progress Update: {progress}% complete\n\nAutomatically updated based on latest changes."
                issue.create_comment(comment)

        # Read ROADMAP_STATUS.md
        with open('ROADMAP_STATUS.md', 'r') as f:
            roadmap_content = f.read()

        # Map of feature keywords to issue numbers
        feature_mapping = {
            # v1.1.0
            'GDB integration for step-by-step debugging': 14,
            'Custom UART driver optimized for QEMU': 2,
            'Better semihosting integration': 3,
            'Alternative QEMU machine types for STM32F4': 4,
            'Comprehensive unit testing framework': 8,
            # v1.2.0
            'Network simulation for IoT testing': 5,
            'Virtual sensors simulation': 7,
            'State snapshots for efficient testing': 9,
            'OTA update mechanisms': 10,
            # v1.3.0
            'CI/CD pipeline for automated testing': 6,
            'Automated testing in virtual environments': 11,
            'Documentation improvements': 12,
            # General
            'Project Tracking Synchronization Process': 13
        }

        # Extract changed files from commit
        changed_files = [item.a_path for item in latest_commit.diff('HEAD~1')]
        print(f"Script triggered by commit: {latest_commit.hexsha}")
        print(f"Changed files in this commit: {changed_files}")

        # Analyze changes and update relevant issues
        if 'ROADMAP_STATUS.md' in changed_files:
            print("ROADMAP_STATUS.md changed, attempting to update all mapped issues.")
            for feature_key, issue_num in feature_mapping.items():
                progress = extract_progress(roadmap_content, feature_key)
                if progress is not None:
                    print(f"Updating issue {issue_num} for feature '{feature_key}' with progress {progress}% (due to ROADMAP_STATUS.md change)")
                    update_issue_progress(issue_num, progress)
                else:
                    print(f"Could not extract progress for feature '{feature_key}' from ROADMAP_STATUS.md")
        else:
            print(f"Analyzing specific file changes (ROADMAP_STATUS.md not in changed files): {changed_files}")
            for file in changed_files:
                print(f"Processing changed file: {file}")
                if file.startswith('src/custom_uart_driver'): # Assuming this is the correct path prefix
                    feature_key = 'Custom UART driver optimized for QEMU'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif 'gdb' in file.lower() or 'debug' in file.lower() or 'exception' in file.lower() and not file.startswith('tests/'): # Avoid double counting from general test folder
                    feature_key = 'GDB integration for step-by-step debugging'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif file.startswith('src/lib/iot_client.py') or file.startswith('tools/mqtt_mock_broker.py') or 'network_sim' in file:
                    feature_key = 'Network simulation for IoT testing'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif file.startswith('src/lib/sensors.py') or 'sensor' in file.lower() and not file.startswith('tests/'):
                    feature_key = 'Virtual sensors simulation'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif 'semihosting' in file.lower():
                    feature_key = 'Better semihosting integration'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif 'qemu_machine' in file.lower() or file.startswith('config/qemu'): # Example path
                    feature_key = 'Alternative QEMU machine types for STM32F4'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif file.startswith('tests/'): # General test changes
                    print(f"File {file} is a test file. Checking related testing frameworks.")
                    # Could update 'Comprehensive unit testing framework' or 'Automated testing in virtual environments'
                    # For simplicity, let's update the primary unit testing framework for now.
                    feature_key_utf = 'Comprehensive unit testing framework'
                    progress_utf = extract_progress(roadmap_content, feature_key_utf)
                    if progress_utf is not None:
                        print(f"Updating '{feature_key_utf}' (Issue {feature_mapping[feature_key_utf]}) with progress {progress_utf}%")
                        update_issue_progress(feature_mapping[feature_key_utf], progress_utf)
                    
                    feature_key_ate = 'Automated testing in virtual environments'
                    progress_ate = extract_progress(roadmap_content, feature_key_ate)
                    if progress_ate is not None:
                        print(f"Updating '{feature_key_ate}' (Issue {feature_mapping[feature_key_ate]}) with progress {progress_ate}%")
                        update_issue_progress(feature_mapping[feature_key_ate], progress_ate)
                elif file.startswith('docs/'):
                    feature_key = 'Documentation improvements'
                    progress = extract_progress(roadmap_content, feature_key)
                    if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                elif file.startswith('.github/workflows/ci.yml'): # Example for CI/CD
                     feature_key = 'CI/CD pipeline for automated testing'
                     progress = extract_progress(roadmap_content, feature_key)
                     if progress is not None:
                        print(f"File {file} relates to '{feature_key}'. Updating issue {feature_mapping[feature_key]} with progress {progress}%")
                        update_issue_progress(feature_mapping[feature_key], progress)
                else:
                    print(f"File {file} did not match specific feature heuristics.")


        # Create a tracking update comment on the sync process issue
        sync_issue_number = feature_mapping.get('Project Tracking Synchronization Process', 13) # Default to 13 if not in map
        sync_issue = repo.get_issue(sync_issue_number)
        sync_issue.create_comment(f"""
        Automatic Tracking Sync Report
        
        Commit: {latest_commit.hexsha}
        Changed files: {len(changed_files)}
        
        Files analyzed:
        {chr(10).join(f"- {file}" for file in changed_files)}
        
        Progress updates applied based on ROADMAP_STATUS.md changes.
        """)
        EOL

        python sync_tracking.py

    - name: Check for milestone updates
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cat > check_milestones.py << 'EOL'
        import os
        from github import Github
        from datetime import datetime, timezone

        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])

        # Get all open milestones
        milestones = repo.get_milestones(state='open')

        # Check each milestone's progress
        for milestone in milestones:
            total_issues = milestone.open_issues + milestone.closed_issues
            if total_issues > 0:
                progress = (milestone.closed_issues / total_issues) * 100
                
                # Create a progress update comment if significant change
                if progress % 10 == 0:  # Update on every 10% progress
                    for issue in repo.get_issues(milestone=milestone):
                        if "tracking" in issue.title.lower():
                            issue.create_comment(f"""
                            Milestone Progress Update: {milestone.title}
                            
                            Current Progress: {progress:.1f}%
                            Open Issues: {milestone.open_issues}
                            Closed Issues: {milestone.closed_issues}
                            Due Date: {milestone.due_on.strftime('%Y-%m-%d')}
                            """)
        EOL

        python check_milestones.py

    - name: Update documentation if needed
      if: success()
      run: |
        # Check if we need to update any documentation
        if git diff --name-only HEAD~1 | grep -q "src/"; then
          echo "Source changes detected, checking documentation..."
          # Add logic to verify and potentially update documentation
        fi 